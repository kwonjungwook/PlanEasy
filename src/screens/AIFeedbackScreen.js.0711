// src/screens/AIFeedbackScreen.js
import { Ionicons } from "@expo/vector-icons";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { useNavigation } from "@react-navigation/native";
import { format, sub } from "date-fns";
import { ko } from "date-fns/locale";
import { StatusBar } from "expo-status-bar";
import { useCallback, useEffect, useMemo, useRef, useState } from "react";
import {
  ActivityIndicator,
  Alert,
  Modal,
  Platform,
  StatusBar as RNStatusBar,
  SafeAreaView,
  ScrollView,
  Text,
  TextInput,
  TouchableOpacity,
  View,
} from "react-native";
import { ToastEventSystem } from "../components/common/AutoToast";
import HeaderBar from "../components/layout/HeaderBar";
import { usePlanner } from "../context/PlannerContext";
import { useProgress } from "../context/ProgressContext";
import { useSubscription } from "../context/SubscriptionContext";
import EnhancedFeedbackService from "../services/ImprovedFeedbackService";

// Chart components
import { DailyStudyChart } from "../components/reports/SimpleCharts";

// Import styles
import {
  THEME_COLORS,
  getColor,
  styles,
} from "../styles/AIFeedbackScreenStyles";

// 1. import 구문에 추가
import { testDeepSeekAPI } from "../services/ImprovedFeedbackService";

// 리포트 타입 상수
const REPORT_TYPES = EnhancedFeedbackService.REPORT_TYPES;

// 스토리지 키 상수
const STORAGE_KEYS = {
  LAST_VIEWED_WEEKLY: "@last_viewed_weekly_report",
  LAST_VIEWED_MONTHLY: "@last_viewed_monthly_report",
  NOTIFICATIONS_SETUP: "report_notifications_setup",
};

// 자동 갱신 주기 (밀리초)
const AUTO_REFRESH_INTERVALS = EnhancedFeedbackService.AUTO_REFRESH_INTERVALS;

/**
 * 접을 수 있는 카드 컴포넌트
 */
const CollapsibleCard = ({
  title,
  children,
  icon,
  borderColor,
  initiallyExpanded = false,
}) => {
  const [isCollapsed, setIsCollapsed] = useState(!initiallyExpanded);

  return (
    <View style={styles.sectionCard}>
      <TouchableOpacity
        style={[
          styles.sectionHeader,
          !isCollapsed && styles.sectionHeaderBorder,
          borderColor && { borderLeftColor: borderColor, borderLeftWidth: 3 },
        ]}
        onPress={() => setIsCollapsed(!isCollapsed)}
      >
        {icon && (
          <Ionicons
            name={icon}
            size={20}
            color="#666"
            style={styles.sectionIcon}
          />
        )}
        <Text style={styles.sectionTitle}>{title}</Text>
        <Ionicons
          name={isCollapsed ? "chevron-down" : "chevron-up"}
          size={20}
          color="#666"
        />
      </TouchableOpacity>
      {!isCollapsed && <View style={styles.sectionContent}>{children}</View>}
    </View>
  );
};

/**
 * 목표 및 D-Day 섹션 컴포넌트
 */
const GoalSection = ({ goalTargets, onRegisterGoal }) => {
  // 목표 데이터 처리
  const goalsAnalysis = useMemo(() => {
    return EnhancedFeedbackService.processGoalsForReport(goalTargets);
  }, [goalTargets]);

  const hasGoals =
    goalsAnalysis && goalsAnalysis.hasGoals && goalsAnalysis.goals.length > 0;

  return (
    <CollapsibleCard
      title="D-Day 현황"
      icon="flag-outline"
      initiallyExpanded={true}
    >
      {hasGoals ? (
        <>
          {/* 전체 상태 메시지 */}
          {goalsAnalysis.overallStatus && (
            <View
              style={{
                padding: 12,
                backgroundColor: "#f0f8ff",
                borderRadius: 8,
                marginBottom: 12,
              }}
            >
              <Text
                style={{
                  fontSize: 14,
                  fontWeight: "500",
                  color: "#333",
                  textAlign: "center",
                }}
              >
                {goalsAnalysis.overallStatus}
              </Text>
            </View>
          )}

          {/* 개별 목표 표시 */}
          {goalsAnalysis.goals.map((goal, index) => {
            let badgeStyle;
            let badgeColor = "#50cebb";

            if (goal.daysLeft === 0) {
              badgeStyle = styles.dDayToday;
              badgeColor = "#FF4444";
            } else if (goal.daysLeft < 0) {
              badgeStyle = styles.dDayFar;
              badgeColor = "#888888";
            } else if (goal.daysLeft <= 3) {
              badgeStyle = styles.dDayNear;
              badgeColor = "#FF4444";
            } else if (goal.daysLeft <= 7) {
              badgeStyle = styles.dDayNear;
              badgeColor = "#FF8800";
            } else if (goal.daysLeft <= 14) {
              badgeStyle = styles.dDayFar;
              badgeColor = "#FFAA00";
            } else {
              badgeStyle = styles.dDayFar;
              badgeColor = "#50cebb";
            }

            return (
              <View key={goal.id || index} style={styles.goalDetailCard}>
                <View style={styles.goalDetailHeader}>
                  <View style={{ flex: 1 }}>
                    <Text style={styles.goalDetailTitle}>{goal.title}</Text>
                    {goal.category && (
                      <Text
                        style={{ fontSize: 12, color: "#666", marginTop: 2 }}
                      >
                        📂 {goal.category}
                      </Text>
                    )}
                  </View>
                  <View
                    style={[
                      styles.dDayBadgeSmall,
                      { backgroundColor: badgeColor },
                    ]}
                  >
                    <Text style={styles.dDayBadgeText}>{goal.dDayText}</Text>
                  </View>
                </View>

                {/* 목표 날짜 표시 */}
                <Text style={{ fontSize: 12, color: "#888", marginBottom: 8 }}>
                  📅 목표일:{" "}
                  {new Date(goal.targetDate).toLocaleDateString("ko-KR")}
                </Text>

                {/* 우선순위 조언 */}
                {goal.priorityAdvice && (
                  <Text
                    style={[
                      styles.goalDetailMessage,
                      { color: "#555", marginBottom: 4 },
                    ]}
                  >
                    💡 {goal.priorityAdvice}
                  </Text>
                )}

                {/* 타입별 조언 */}
                {goal.typeSpecificAdvice && (
                  <Text
                    style={[
                      styles.goalDetailMessage,
                      { color: "#666", fontSize: 12 },
                    ]}
                  >
                    🎯 {goal.typeSpecificAdvice}
                  </Text>
                )}
              </View>
            );
          })}

          {/* 목표 분석 정보 */}
          {goalsAnalysis.analysis && (
            <View
              style={{
                marginTop: 12,
                padding: 12,
                backgroundColor: "#f9f9f9",
                borderRadius: 8,
              }}
            >
              <Text
                style={{
                  fontSize: 13,
                  fontWeight: "500",
                  marginBottom: 8,
                  color: "#333",
                }}
              >
                📊 목표 현황
              </Text>
              <View
                style={{
                  flexDirection: "row",
                  justifyContent: "space-between",
                  flexWrap: "wrap",
                }}
              >
                <Text style={{ fontSize: 12, color: "#666" }}>
                  활성 목표: {goalsAnalysis.analysis.totalActiveGoals}개
                </Text>
                {goalsAnalysis.analysis.urgentGoalsCount > 0 && (
                  <Text style={{ fontSize: 12, color: "#FF4444" }}>
                    긴급: {goalsAnalysis.analysis.urgentGoalsCount}개
                  </Text>
                )}
                {goalsAnalysis.analysis.todayGoalsCount > 0 && (
                  <Text
                    style={{
                      fontSize: 12,
                      color: "#FF4444",
                      fontWeight: "bold",
                    }}
                  >
                    오늘 D-Day: {goalsAnalysis.analysis.todayGoalsCount}개
                  </Text>
                )}
              </View>
              {goalsAnalysis.analysis.totalDailyTarget > 0 && (
                <Text style={{ fontSize: 12, color: "#666", marginTop: 4 }}>
                  일일 권장 학습시간: {goalsAnalysis.analysis.totalDailyTarget}
                  시간
                </Text>
              )}
            </View>
          )}
        </>
      ) : (
        <View style={{ padding: 16, alignItems: "center" }}>
          <Text
            style={{ color: "#666", fontStyle: "italic", marginBottom: 12 }}
          >
            설정된 D-Day 목표가 없습니다.
          </Text>
          <TouchableOpacity
            style={{
              backgroundColor: "#50cebb",
              paddingHorizontal: 20,
              paddingVertical: 10,
              borderRadius: 8,
              marginBottom: 8,
            }}
            onPress={() => {
              Alert.alert("목표 등록", "목표를 등록하시겠습니까?", [
                { text: "취소", style: "cancel" },
                {
                  text: "이동",
                  onPress: onRegisterGoal,
                },
              ]);
            }}
          >
            <Text style={{ color: "white", fontWeight: "500" }}>
              🎯 목표 등록하기
            </Text>
          </TouchableOpacity>
          <Text
            style={{
              color: "#888",
              fontSize: 12,
              textAlign: "center",
            }}
          >
            시험, 자격증, 프로젝트 등의 목표를 등록하여 D-Day를 추적해보세요.
          </Text>
        </View>
      )}
    </CollapsibleCard>
  );
};

/**
 * 오늘의 일정 및 공부 컴포넌트
 */
const TodayScheduleAndStudy = ({ studySessions, schedules, selectedDate }) => {
  // 오늘의 일정 가져오기
  const todaySchedules = useMemo(() => {
    return schedules[selectedDate] || [];
  }, [schedules, selectedDate]);

  // 오늘의 공부 세션 가져오기
  const todayStudySessions = useMemo(() => {
    return studySessions[selectedDate] || [];
  }, [studySessions, selectedDate]);

  // 데이터 없음 체크
  const hasNoData =
    todaySchedules.length === 0 && todayStudySessions.length === 0;

  // 총 공부 시간 계산
  const totalStudyTime = useMemo(() => {
    return todayStudySessions.reduce(
      (total, session) => total + session.duration,
      0
    );
  }, [todayStudySessions]);

  // 시간 포맷 함수
  const formatLongTime = (seconds) => {
    const hours = Math.floor(seconds / 3600);
    const mins = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    return `${hours.toString().padStart(2, "0")}:${mins
      .toString()
      .padStart(2, "0")}:${secs.toString().padStart(2, "0")}`;
  };

  // 과목별 공부 시간 그룹화
  const subjectTimes = useMemo(() => {
    const result = {};
    todayStudySessions.forEach((session) => {
      const subject = session.subject || "공부시간";
      if (!result[subject]) {
        result[subject] = 0;
      }
      result[subject] += session.duration;
    });
    return result;
  }, [todayStudySessions]);

  // 시간별 일정 그룹화
  const schedulesByTime = useMemo(() => {
    const result = {};

    // 일정 그룹화
    todaySchedules.forEach((schedule) => {
      const hour = schedule.startTime?.split(":")[0] || "00";
      const timeSlot = `${hour}시`;

      if (!result[timeSlot]) {
        result[timeSlot] = { schedules: [], studySessions: [] };
      }

      result[timeSlot].schedules.push(schedule);
    });

    // 공부 세션 시간별 그룹화
    todayStudySessions.forEach((session) => {
      if (session.timestamp) {
        const date = new Date(session.timestamp);
        const hour = date.getHours();
        const timeSlot = `${hour}시`;

        if (!result[timeSlot]) {
          result[timeSlot] = { schedules: [], studySessions: [] };
        }

        result[timeSlot].studySessions.push(session);
      }
    });

    return result;
  }, [todaySchedules, todayStudySessions]);

  // 데이터 없음 상태 표시
  if (hasNoData) {
    return (
      <View style={{ padding: 16, alignItems: "center" }}>
        <Text style={{ color: "#666", fontStyle: "italic" }}>
          오늘의 일정과 공부 기록이 없습니다.
        </Text>
      </View>
    );
  }

  return (
    <View style={{ padding: 8 }}>
      {/* 총 공부 시간 */}
      {totalStudyTime > 0 && (
        <View
          style={{
            flexDirection: "row",
            justifyContent: "space-between",
            padding: 8,
            backgroundColor: "#f5f5f5",
            borderRadius: 8,
            marginBottom: 16,
          }}
        >
          <Text style={{ fontWeight: "bold", color: "#333" }}>
            오늘 총 공부시간:
          </Text>
          <Text style={{ fontWeight: "bold", color: "#50cebb" }}>
            {formatLongTime(totalStudyTime)}
          </Text>
        </View>
      )}

      {/* 과목별 공부 시간 */}
      {Object.keys(subjectTimes).length > 0 && (
        <View style={{ marginBottom: 16 }}>
          <Text style={{ fontWeight: "bold", marginBottom: 8, color: "#333" }}>
            과목별 공부시간:
          </Text>
          {Object.entries(subjectTimes).map(([subject, duration], index) => (
            <View
              key={index}
              style={{
                flexDirection: "row",
                justifyContent: "space-between",
                paddingVertical: 4,
              }}
            >
              <Text style={{ color: "#555" }}>{subject}</Text>
              <Text style={{ color: "#50cebb" }}>
                {formatLongTime(duration)}
              </Text>
            </View>
          ))}
        </View>
      )}

      {/* 시간대별 활동 */}
      <Text
        style={{
          fontWeight: "bold",
          marginBottom: 8,
          marginTop: 8,
          color: "#333",
        }}
      >
        시간대별 활동:
      </Text>
      {Object.entries(schedulesByTime)
        .sort(([a], [b]) => a.localeCompare(b)) // 시간순 정렬
        .map(([timeSlot, data], index) => (
          <View
            key={index}
            style={{
              marginBottom: 12,
              borderLeftWidth: 3,
              borderLeftColor: "#50cebb",
              paddingLeft: 8,
            }}
          >
            <Text
              style={{ fontWeight: "bold", color: "#333", marginBottom: 4 }}
            >
              {timeSlot}
            </Text>

            {/* 해당 시간대 일정 */}
            {data.schedules.map((schedule, idx) => (
              <View
                key={`schedule-${idx}`}
                style={{
                  flexDirection: "row",
                  alignItems: "center",
                  marginBottom: 4,
                }}
              >
                <Ionicons
                  name="calendar-outline"
                  size={14}
                  color="#666"
                  style={{ marginRight: 4 }}
                />
                <Text style={{ color: "#555" }}>
                  {schedule.startTime} - {schedule.endTime} {schedule.task}
                </Text>
              </View>
            ))}

            {/* 해당 시간대 공부 세션 */}
            {data.studySessions.map((session, idx) => (
              <View
                key={`study-${idx}`}
                style={{
                  flexDirection: "row",
                  alignItems: "center",
                  marginBottom: 4,
                }}
              >
                <Ionicons
                  name="book-outline"
                  size={14}
                  color="#50cebb"
                  style={{ marginRight: 4 }}
                />
                <Text style={{ color: "#555" }}>
                  {session.subject || "공부"} (
                  {formatLongTime(session.duration)})
                </Text>
              </View>
            ))}
          </View>
        ))}
    </View>
  );
};

/**
 * 자동 리포트 알림 정보 카드
 */
// AutomaticReportInfoCard 컴포넌트 제거됨 - 무료 버전에서는 자동 알림 없음

/**
 * 피드백 화면 메인 컴포넌트
 */
const AIFeedbackScreen = () => {
  // 컨텍스트에서 데이터 가져오기
  const {
    schedules = {},
    tasks = {},
    aiReports = {},
    generateAIFeedback,
    selectedDate,
    earnedBadges,
    setSelectedDate,
    studySessions = {},
    goalTargets = [],
    addGoalTarget,
  } = usePlanner() || {};

  // 구독 상태
  const { isSubscribed } = useSubscription();

  // 포인트 및 진행 정보
  const { points } = useProgress();

  // 상태 관리
  const [activeTab, setActiveTab] = useState(REPORT_TYPES.DAILY);
  const [isLoading, setIsLoading] = useState(false);
  const [currentReport, setCurrentReport] = useState(null);
  const [lastUpdateTime, setLastUpdateTime] = useState(new Date());
  const [activeCategory, setActiveCategory] = useState("all");
  const [savedWeeklyReports, setSavedWeeklyReports] = useState({});
  const [savedMonthlyReports, setSavedMonthlyReports] = useState({});
  const [notificationsSetup, setNotificationsSetup] = useState(false);
  const [aiTestResult, setAiTestResult] = useState(null);
  const [isAITesting, setIsAITesting] = useState(false);

  // 목표 등록 모달 상태
  const [showGoalModal, setShowGoalModal] = useState(false);
  const [goalForm, setGoalForm] = useState({
    title: "",
    category: "시험",
    targetDate: "",
    description: "",
  });

  // 참조
  const autoRefreshTimer = useRef(null);
  const initializedRef = useRef(false);
  const navigation = useNavigation();

  // 구독 페이지로 이동
  const handleUpgrade = useCallback(() => {
    navigation.navigate("Subscription");
  }, [navigation]);

  // 목표 등록 모달 열기
  const showGoalRegistrationModal = useCallback(() => {
    setShowGoalModal(true);
  }, []);

  // 날짜 유효성 검사
  const validateDate = (dateString) => {
    const dateRegex = /^\d{4}-\d{2}-\d{2}$/;
    if (!dateRegex.test(dateString)) return false;

    const date = new Date(dateString);
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    return date instanceof Date && !isNaN(date) && date >= today;
  };

  // 목표 등록 처리
  const handleGoalSubmit = useCallback(async () => {
    if (!goalForm.title.trim()) {
      Alert.alert("입력 오류", "목표 제목을 입력해주세요.");
      return;
    }

    if (!goalForm.targetDate.trim()) {
      Alert.alert("입력 오류", "목표일을 입력해주세요.");
      return;
    }

    if (!validateDate(goalForm.targetDate)) {
      Alert.alert(
        "날짜 오류",
        "올바른 날짜 형식(YYYY-MM-DD)으로 입력하고, 오늘 이후의 날짜를 선택해주세요."
      );
      return;
    }

    try {
      const success = await addGoalTarget({
        title: goalForm.title.trim(),
        category: goalForm.category,
        targetDate: goalForm.targetDate,
        description: goalForm.description.trim(),
      });

      if (success) {
        setShowGoalModal(false);
        setGoalForm({
          title: "",
          category: "시험",
          targetDate: "",
          description: "",
        });
        ToastEventSystem.showToast("목표가 등록되었습니다!", 2000);
      } else {
        Alert.alert("오류", "목표 등록에 실패했습니다.");
      }
    } catch (error) {
      console.error("목표 등록 오류:", error);
      Alert.alert("오류", "목표 등록 중 문제가 발생했습니다.");
    }
  }, [goalForm, addGoalTarget]);

  // 오늘 날짜를 YYYY-MM-DD 형식으로 반환
  const getTodayString = () => {
    const today = new Date();
    return today.toISOString().split("T")[0];
  };

  // 저장된 리포트 로드
  const loadSavedReports = useCallback(async () => {
    try {
      const weeklyReports = await EnhancedFeedbackService.getSavedAIReports(
        REPORT_TYPES.WEEKLY
      );
      const monthlyReports = await EnhancedFeedbackService.getSavedAIReports(
        REPORT_TYPES.MONTHLY
      );

      setSavedWeeklyReports(weeklyReports);
      setSavedMonthlyReports(monthlyReports);

      // 알림 설정 상태 확인
      const notificationsStatus = await AsyncStorage.getItem(
        STORAGE_KEYS.NOTIFICATIONS_SETUP
      );
      setNotificationsSetup(notificationsStatus === "true");

      console.log(
        `${Object.keys(weeklyReports).length}개의 주간 리포트와 ${
          Object.keys(monthlyReports).length
        }개의 월간 리포트를 로드했습니다.`
      );
    } catch (error) {
      console.error("저장된 리포트 로드 오류:", error);
    }
  }, []);

  // 리포트 스케줄링 함수 제거됨 - 무료 버전에서는 불필요

  // 자동 갱신 타이머 설정
  const setupAutoRefresh = useCallback(() => {
    // 기존 타이머 해제
    if (autoRefreshTimer.current) {
      clearTimeout(autoRefreshTimer.current);
    }

    console.log(
      `${activeTab} 리포트 자동 갱신 타이머 설정: ${
        AUTO_REFRESH_INTERVALS[activeTab] / 60000
      }분`
    );

    // 현재 탭에 맞는 새 타이머 설정
    autoRefreshTimer.current = setTimeout(() => {
      console.log(`${activeTab} 리포트 자동 갱신 중`);
      handleGenerateFeedback(false); // 자동 갱신은 기본 분석만
    }, AUTO_REFRESH_INTERVALS[activeTab]);
  }, [activeTab, handleGenerateFeedback]);

  // 리포트 데이터 로드
  const loadReportData = useCallback(async () => {
    setIsLoading(true);

    try {
      if (!schedules || !tasks) {
        console.warn("필요한 데이터가 아직 로드되지 않았습니다");
        setTimeout(loadReportData, 500); // 0.5초 후 재시도
        return;
      }

      console.log("리포트 데이터 로드 중:", activeTab, selectedDate);
      let report = null;

      // 먼저 메모리에서 기존 리포트 찾기
      if (aiReports && Object.keys(aiReports).length > 0) {
        if (activeTab === REPORT_TYPES.DAILY) {
          report = aiReports[selectedDate];
        } else if (activeTab === REPORT_TYPES.WEEKLY) {
          const weekKey = `week-${format(
            new Date(selectedDate),
            "yyyy-MM-dd"
          )}`;
          report = aiReports[weekKey];
        } else if (activeTab === REPORT_TYPES.MONTHLY) {
          const monthKey = `month-${format(new Date(selectedDate), "yyyy-MM")}`;
          report = aiReports[monthKey];
        }
      }

      // 메모리에 없으면 스토리지에서 리포트 로드 시도
      if (
        !report &&
        (activeTab === REPORT_TYPES.WEEKLY ||
          activeTab === REPORT_TYPES.MONTHLY)
      ) {
        let savedReports;
        let reportKey;

        if (activeTab === REPORT_TYPES.WEEKLY) {
          // 주간 키 계산
          const date = new Date(selectedDate);
          const year = date.getFullYear();
          const weekNumber = Math.ceil(
            (date.getDate() + 6 - date.getDay()) / 7
          );
          reportKey = `${year}-W${weekNumber.toString().padStart(2, "0")}`;
          savedReports = savedWeeklyReports;
        } else {
          // 월간 키 계산
          reportKey = format(new Date(selectedDate), "yyyy-MM");
          savedReports = savedMonthlyReports;
        }

        if (savedReports && savedReports[reportKey]) {
          report = savedReports[reportKey];
          console.log(`저장된 ${activeTab} 리포트 로드: ${reportKey}`);
        }
      }

      // 리포트가 여전히 없으면 새로 생성
      if (!report) {
        if (generateAIFeedback) {
          // 모든 사용자에게 기본 분석 생성
          report = await generateAIFeedback(
            selectedDate,
            activeTab,
            false, // 초기 생성에는 상세 분석 사용 안 함
            isSubscribed // 구독 상태 전달
          );

          if (report) {
            setCurrentReport(report);
            setLastUpdateTime(new Date());
          }
        }
      } else {
        setCurrentReport(report);
        setLastUpdateTime(new Date());
      }
    } catch (error) {
      console.error("리포트 데이터 로드 오류:", error);
      ToastEventSystem.showToast("데이터 로드 중 오류가 발생했습니다", 2000);
    } finally {
      setIsLoading(false);
    }
  }, [
    aiReports,
    selectedDate,
    activeTab,
    generateAIFeedback,
    isSubscribed,
    schedules,
    tasks,
    savedWeeklyReports,
    savedMonthlyReports,
  ]);

  // 피드백 생성 핸들러
  const handleGenerateFeedback = useCallback(
    async (useAI = false) => {
      // 상세 분석에 대한 구독 확인
      if (activeTab !== REPORT_TYPES.DAILY && useAI && !isSubscribed) {
        ToastEventSystem.showToast("상세 분석은 구독자 전용 기능입니다", 2000);
        handleUpgrade();
        return;
      }

      setIsLoading(true);
      try {
        if (!generateAIFeedback) {
          throw new Error("generateAIFeedback 함수를 사용할 수 없습니다");
        }

        // 리포트 생성
        const report = await generateAIFeedback(
          selectedDate,
          activeTab,
          useAI,
          isSubscribed
        );

        if (report) {
          setCurrentReport(report);
          setLastUpdateTime(new Date());

          // 상세 분석 리포트 저장 (주간 및 월간)
          if (
            useAI &&
            (activeTab === REPORT_TYPES.WEEKLY ||
              activeTab === REPORT_TYPES.MONTHLY)
          ) {
            // EnhancedFeedbackService의 리포트 저장 함수 사용
            await EnhancedFeedbackService.saveReport(
              selectedDate,
              activeTab,
              report
            );

            // 저장된 리포트 다시 로드
            const updatedReports =
              await EnhancedFeedbackService.getSavedAIReports(activeTab);
            if (activeTab === REPORT_TYPES.WEEKLY) {
              setSavedWeeklyReports(updatedReports);
            } else {
              setSavedMonthlyReports(updatedReports);
            }

            // 확인 메시지 표시
            ToastEventSystem.showToast(
              `${
                activeTab === REPORT_TYPES.WEEKLY ? "주간" : "월간"
              } 상세 리포트가 저장되었습니다`,
              2000
            );
          }
        }
      } catch (error) {
        console.error("리포트 생성 오류:", error);
        Alert.alert(
          "오류 발생",
          "리포트 생성 중 문제가 발생했습니다. 다시 시도해주세요."
        );
      } finally {
        setIsLoading(false);
      }
    },
    [activeTab, selectedDate, isSubscribed, generateAIFeedback, handleUpgrade]
  );

  // 3. AI 테스트 함수 추가 (handleGenerateFeedback 함수 아래에)
  const handleAITest = useCallback(async () => {
    if (isAITesting) return;

    setIsAITesting(true);
    setAiTestResult(null);

    try {
      console.log("🧪 DeepSeek API 테스트 시작...");
      ToastEventSystem.showToast("AI 테스트 중... 잠시만 기다려주세요", 3000);

      // 🔥 실제 사용자 데이터 전달
      const plannerData = {
        schedules: schedules || {},
        tasks: tasks || {},
        studySessions: studySessions || {},
        goalTargets: goalTargets || [],
      };

      console.log("📊 전달할 데이터:", {
        schedulesCount: Object.keys(plannerData.schedules).length,
        tasksCount: Object.keys(plannerData.tasks).length,
        studySessionsCount: Object.keys(plannerData.studySessions).length,
        goalsCount: plannerData.goalTargets.length,
      });

      const result = await testDeepSeekAPI(activeTab, plannerData);

      setAiTestResult(result);

      if (result.success) {
        const dataSource =
          result.data.metadata?.dataSource === "real_user_data"
            ? "실제 데이터"
            : "기본 데이터";
        ToastEventSystem.showToast(
          `✅ AI 테스트 성공! (${dataSource} 사용)`,
          2000
        );
        console.log("✅ AI 테스트 결과:", result.data);
      } else {
        ToastEventSystem.showToast(`❌ AI 테스트 실패: ${result.error}`, 3000);
        console.error("❌ AI 테스트 실패:", result.error);
      }
    } catch (error) {
      console.error("AI 테스트 중 오류:", error);
      ToastEventSystem.showToast("AI 테스트 중 오류가 발생했습니다", 2000);
      setAiTestResult({
        success: false,
        error: error.message,
      });
    } finally {
      setIsAITesting(false);
    }
  }, [activeTab, schedules, tasks, studySessions, goalTargets]);

  // 탭 변경 핸들러 (구독자 체크 제거)
  const handleTabChange = useCallback((tabName) => {
    // 전체 무료이므로 모든 탭으로 전환 가능
    setActiveTab(tabName);
  }, []);

  // 4. AI 테스트 결과 렌더링 함수 추가
  const renderAITestResult = () => {
    if (!aiTestResult) return null;

    return (
      <CollapsibleCard
        title="🤖 AI 테스트 결과"
        icon="flask-outline"
        borderColor="#FF6B35"
        initiallyExpanded={true}
      >
        {aiTestResult.success ? (
          <View>
            {/* AI 분석 */}
            <View style={styles.aiSection}>
              <Text style={styles.aiSectionTitle}>📊 AI 분석</Text>
              <Text style={styles.aiAnalysisText}>
                {aiTestResult.data.analysis}
              </Text>
            </View>

            {/* AI 추천 일정 */}
            <View style={styles.aiSection}>
              <Text style={styles.aiSectionTitle}>📅 AI 추천 일정</Text>
              {aiTestResult.data.recommendations.map((rec, index) => (
                <View key={index} style={styles.aiRecommendationItem}>
                  <View style={styles.aiRecommendationHeader}>
                    <Text style={styles.aiTime}>{rec.time}</Text>
                    <View
                      style={[
                        styles.aiPriorityBadge,
                        {
                          backgroundColor:
                            rec.priority === "critical"
                              ? "#8B0000"
                              : rec.priority === "high"
                              ? "#FF4444"
                              : rec.priority === "medium"
                              ? "#FFB74D"
                              : "#50cebb",
                        },
                      ]}
                    >
                      <Text style={styles.aiPriorityText}>{rec.priority}</Text>
                    </View>
                  </View>
                  <Text style={styles.aiTask}>{rec.task}</Text>
                  <Text style={styles.aiCategory}>📂 {rec.category}</Text>
                  {rec.related_goal && (
                    <Text style={styles.aiRelatedGoal}>
                      🎯 관련 목표: {rec.related_goal}
                    </Text>
                  )}
                  <Text style={styles.aiReason}>💡 {rec.reason}</Text>
                </View>
              ))}
            </View>

            {/* AI 인사이트 */}
            <View style={styles.aiSection}>
              <Text style={styles.aiSectionTitle}>🔍 AI 인사이트</Text>
              <Text style={styles.aiInsightText}>
                {aiTestResult.data.insights}
              </Text>
            </View>

            {/* 집중 영역 */}
            <View style={styles.aiSection}>
              <Text style={styles.aiSectionTitle}>🎯 집중 영역</Text>
              <View style={styles.focusAreasContainer}>
                {aiTestResult.data.focus_areas &&
                aiTestResult.data.focus_areas.length > 0 ? (
                  aiTestResult.data.focus_areas.map((area, index) => (
                    <View key={index} style={styles.focusAreaItem}>
                      <Text style={styles.focusAreaText}>{area}</Text>
                    </View>
                  ))
                ) : (
                  <Text style={styles.focusAreaText}>집중 영역 정보 없음</Text>
                )}
              </View>
            </View>

            {/* D-Day 전략 (새로 추가) */}
            {aiTestResult.data.dday_strategy && (
              <View style={styles.aiSection}>
                <Text style={styles.aiSectionTitle}>⏰ D-Day 달성 전략</Text>
                <Text style={styles.ddayStrategyText}>
                  {aiTestResult.data.dday_strategy}
                </Text>
              </View>
            )}

            {/* 메타데이터 */}
            {aiTestResult.data.metadata && (
              <View style={styles.aiMetadata}>
                <Text style={styles.aiMetadataText}>
                  🕐{" "}
                  {format(
                    new Date(aiTestResult.data.metadata.requestTime),
                    "HH:mm:ss"
                  )}
                  {aiTestResult.data.metadata.tokensUsed
                    ? ` | 토큰: ${aiTestResult.data.metadata.tokensUsed}`
                    : ""}
                  {aiTestResult.data.metadata.dataSource &&
                    ` | ${
                      aiTestResult.data.metadata.dataSource === "real_user_data"
                        ? "📊 실제 데이터"
                        : "🔧 기본 데이터"
                    }`}
                </Text>
              </View>
            )}
          </View>
        ) : (
          <View style={styles.aiErrorContainer}>
            <Text style={styles.aiErrorTitle}>❌ 테스트 실패</Text>
            <Text style={styles.aiErrorMessage}>
              {aiTestResult.error || "알 수 없는 오류"}
            </Text>

            {aiTestResult.fallback && (
              <View style={styles.aiFallbackContainer}>
                <Text style={styles.aiFallbackTitle}>🔄 대체 응답</Text>
                <Text style={styles.aiFallbackText}>
                  {aiTestResult.fallback.analysis}
                </Text>
              </View>
            )}
          </View>
        )}
      </CollapsibleCard>
    );
  };

  // 날짜 포맷 유틸리티
  const formatLastUpdateTime = useCallback(
    (date) => format(date, "yyyy년 MM월 dd일 HH:mm"),
    []
  );

  // 컴포넌트 마운트 시 초기화
  useEffect(() => {
    // 저장된 리포트 로드
    loadSavedReports();

    // 언마운트 시 타이머 정리
    return () => {
      if (autoRefreshTimer.current) {
        clearTimeout(autoRefreshTimer.current);
      }
    };
  }, [loadSavedReports]);

  // 리포트 스케줄링 관련 useEffect 제거됨 - 무료 버전에서는 불필요

  // 탭이나 날짜 변경 시 리포트 데이터 로드
  useEffect(() => {
    loadReportData();
    setupAutoRefresh();
  }, [selectedDate, activeTab, isSubscribed, loadReportData, setupAutoRefresh]);

  // 주간 리포트 추가 콘텐츠 렌더링
  const renderWeeklyExtraContent = useMemo(() => {
    return (
      <View style={styles.additionalContentContainer}>
        {/* 학습 테마 섹션 - 모든 사용자에게 제공 */}
        <CollapsibleCard
          title="이번 주 학습 테마"
          icon="star"
          borderColor="#FFD700"
        >
          <>
            <Text style={styles.themeText}>
              "{currentReport?.weeklyTheme || "데이터 분석 중..."}"
            </Text>

            <View style={styles.focusSection}>
              <Text style={styles.focusTitle}>다음 주 집중 포인트</Text>
              <Text style={styles.focusText}>
                {currentReport?.nextWeekFocus ||
                  "충분한 데이터가 쌓이면 제안해 드릴게요."}
              </Text>
            </View>
          </>
        </CollapsibleCard>

        {/* 일정 인사이트 섹션 - 모든 사용자에게 제공 */}
        <CollapsibleCard
          title="일정 인사이트"
          icon="analytics"
          borderColor="#50cebb"
        >
          <>
            <Text style={styles.insightText}>
              {currentReport?.scheduleInsight ||
                "더 많은 데이터를 수집하여 정확한 인사이트를 제공해 드릴게요."}
            </Text>
          </>
        </CollapsibleCard>
      </View>
    );
  }, [activeTab, currentReport, handleUpgrade]);

  // 월간 리포트 추가 콘텐츠 렌더링
  const renderMonthlyExtraContent = useMemo(() => {
    return (
      <View style={styles.additionalContentContainer}>
        {/* 이번 달 테마 섹션 - 모든 사용자에게 제공 */}
        <CollapsibleCard title="이번 달 테마" icon="star" borderColor="#FFD700">
          <>
            <Text style={styles.themeText}>
              "{currentReport?.monthlyTheme || "데이터 분석 중..."}"
            </Text>

            <View style={styles.focusSection}>
              <Text style={styles.focusTitle}>다음 달 집중 포인트</Text>
              <Text style={styles.focusText}>
                {currentReport?.nextMonthFocus ||
                  "충분한 데이터가 쌓이면 제안해 드릴게요."}
              </Text>
            </View>
          </>
        </CollapsibleCard>

        {/* 생산성 점수 - 모든 사용자에게 제공 */}
        <CollapsibleCard
          title="생산성 점수"
          icon="trophy"
          borderColor="#FF6B35"
        >
          {currentReport?.productivityScore ? (
            <>
              <View style={styles.scoreContainer}>
                <Text style={styles.scoreText}>
                  {currentReport?.productivityScore}점
                </Text>
                <Text style={styles.scoreSubText}>이번 달 평균</Text>
              </View>

              <View style={styles.scoreAnalysis}>
                <Text style={styles.scoreAnalysisText}>
                  {currentReport?.productivityAnalysis ||
                    "더 정확한 분석을 위해 데이터를 수집하고 있습니다."}
                </Text>
              </View>
            </>
          ) : (
            <Text style={styles.noDataText}>
              더 정확한 생산성 점수를 위해 데이터를 수집하고 있습니다.
            </Text>
          )}
        </CollapsibleCard>

        {/* 패턴 분석 섹션 - 모든 사용자에게 제공 */}
        <CollapsibleCard
          title="패턴 분석"
          icon="analytics"
          borderColor="#50cebb"
        >
          <>
            <Text style={styles.patternText}>
              {currentReport?.patternAnalysis ||
                "더 많은 데이터를 바탕으로 패턴을 분석해 드릴게요."}
            </Text>
          </>
        </CollapsibleCard>
      </View>
    );
  }, [activeTab, currentReport, handleUpgrade]);

  // 리포트 렌더링 함수
  const renderReport = () => {
    if (isLoading) {
      return (
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color={THEME_COLORS.primary} />
          <Text style={styles.loadingText}>데이터를 분석하고 있습니다...</Text>
        </View>
      );
    }

    if (!currentReport) {
      return (
        <View style={styles.emptyContainer}>
          <Ionicons name="analytics-outline" size={64} color="#aaa" />
          <Text style={styles.emptyText}>아직 생성된 리포트가 없습니다.</Text>

          <TouchableOpacity
            style={styles.generateButton}
            onPress={() => handleGenerateFeedback(false)}
          >
            <Text style={styles.generateButtonText}>리포트 생성하기</Text>
          </TouchableOpacity>
        </View>
      );
    }

    return (
      <View style={styles.reportContainer}>
        <View style={styles.reportHeader}>
          <Text style={styles.reportTitle}>
            {activeTab === REPORT_TYPES.DAILY
              ? "일간 리포트"
              : activeTab === REPORT_TYPES.WEEKLY
              ? "주간 리포트"
              : "월간 리포트"}
          </Text>
          <Text style={styles.reportDate}>
            {activeTab === REPORT_TYPES.DAILY
              ? format(new Date(selectedDate), "yyyy년 MM월 dd일")
              : activeTab === REPORT_TYPES.WEEKLY
              ? `${format(
                  sub(new Date(selectedDate), {
                    days: new Date(selectedDate).getDay(),
                  }),
                  "MM/dd"
                )} ~ ${format(
                  sub(new Date(selectedDate), {
                    days: new Date(selectedDate).getDay() - 6,
                  }),
                  "MM/dd"
                )}`
              : format(new Date(selectedDate), "yyyy년 MM월")}
          </Text>

          {/* 자동 리포트 알림 메시지 제거됨 - 무료 버전에서는 불필요 */}
        </View>
        {/* 일간 리포트의 경우 일정 및 공부 섹션을 상단에 배치 */}
        {activeTab === REPORT_TYPES.DAILY && (
          <>
            {/* 일일 공부 세션 차트 */}
            <DailyStudyChart studySessions={studySessions[selectedDate]} />

            {/* 오늘의 일정 및 공부 컴포넌트 */}
            <CollapsibleCard
              title="오늘의 일정 및 공부"
              icon="today-outline"
              borderColor="#50cebb"
              initiallyExpanded={true}
            >
              <TodayScheduleAndStudy
                studySessions={studySessions}
                schedules={schedules}
                selectedDate={selectedDate}
              />
            </CollapsibleCard>

            {/* D-Day 상태 섹션 */}
            <GoalSection
              goalTargets
              onRegisterGoal={() => navigation.navigate("홈")}
            />
          </>
        )}
        {/* 자동 리포트 정보 카드 제거됨 - 무료 버전에서는 불필요 */}

        {renderAITestResult()}
        {/* 주간 리포트 추가 콘텐츠 */}
        {renderWeeklyExtraContent}
        {/* 월간 리포트 추가 콘텐츠 */}
        {renderMonthlyExtraContent}
        {/* 모든 리포트 유형 공통 섹션 */}
        <CollapsibleCard title="인사이트" icon="bulb-outline">
          <Text style={styles.insightText}>
            {currentReport?.insights || "데이터 분석 중..."}
          </Text>
        </CollapsibleCard>
        {/* 주요 통계 */}
        <View style={styles.statsCard}>
          <Text style={styles.statsTitle}>주요 통계</Text>
          <View style={styles.statRow}>
            <View style={styles.statItem}>
              <Text style={styles.statValue}>
                {currentReport?.completionRate || "0"}%
              </Text>
              <Text style={styles.statLabel}>일정 완료율</Text>
            </View>
            <View style={styles.statItem}>
              <Text style={styles.statValue}>
                {currentReport?.totalHours || "0"}시간
              </Text>
              <Text style={styles.statLabel}>총 활동시간</Text>
            </View>
            <View style={styles.statItem}>
              <Text style={styles.statValue}>
                {activeTab === REPORT_TYPES.DAILY
                  ? currentReport?.mostProductiveTime || "N/A"
                  : activeTab === REPORT_TYPES.WEEKLY
                  ? currentReport?.mostProductiveDay
                    ? format(new Date(currentReport.mostProductiveDay), "EEE", {
                        locale: ko,
                      })
                    : "N/A"
                  : currentReport?.avgDailyHours || "0"}
                시간
              </Text>
              <Text style={styles.statLabel}>
                {activeTab === REPORT_TYPES.DAILY
                  ? "생산성 높은 시간"
                  : activeTab === REPORT_TYPES.WEEKLY
                  ? "최고 생산성 날짜"
                  : "일평균 활동시간"}
              </Text>
            </View>
          </View>
        </View>
        {/* 카테고리별 분석 */}
        {currentReport?.subjectAnalysis &&
          Object.keys(currentReport.subjectAnalysis).length > 0 && (
            <CollapsibleCard title="카테고리별 분석" icon="pie-chart">
              <View style={styles.categoryList}>
                {Object.entries(currentReport.subjectAnalysis)
                  .sort((a, b) => b[1] - a[1])
                  .map(([category, seconds]) => {
                    const hours = Math.round((seconds / 3600) * 10) / 10;
                    const totalSeconds = Object.values(
                      currentReport.subjectAnalysis
                    ).reduce((sum, val) => sum + val, 0);
                    const percentage =
                      totalSeconds > 0
                        ? Math.round((seconds / totalSeconds) * 100)
                        : 0;

                    return (
                      <View key={category} style={styles.categoryItem}>
                        <View style={styles.categoryHeader}>
                          <Text style={styles.categoryName}>{category}</Text>
                          <Text style={styles.categoryTime}>{hours}시간</Text>
                        </View>
                        <View style={styles.progressContainer}>
                          <View
                            style={[
                              styles.progressBar,
                              {
                                width: `${percentage}%`,
                                backgroundColor: getColor("category", category),
                              },
                            ]}
                          />
                        </View>
                      </View>
                    );
                  })}
              </View>
            </CollapsibleCard>
          )}
        {/* 주간 리포트의 일별 진행 상황 차트 */}
        {activeTab === REPORT_TYPES.WEEKLY &&
          currentReport?.dailyCompletionRate && (
            <CollapsibleCard title="일별 진행 상황" icon="calendar">
              <View style={styles.weeklyChart}>
                {Object.entries(currentReport.dailyCompletionRate)
                  .sort((a, b) => a[0].localeCompare(b[0]))
                  .map(([date, rate]) => {
                    const dayName = format(new Date(date), "EEE", {
                      locale: ko,
                    });
                    return (
                      <View key={date} style={styles.weeklyChartItem}>
                        <Text style={styles.weeklyChartDay}>{dayName}</Text>
                        <View style={styles.weeklyChartBarContainer}>
                          <View
                            style={[
                              styles.weeklyChartBar,
                              { height: `${rate}%` },
                            ]}
                          />
                        </View>
                        <Text style={styles.weeklyChartValue}>{rate}%</Text>
                      </View>
                    );
                  })}
              </View>
            </CollapsibleCard>
          )}
        {/* 개선 제안 */}
        <CollapsibleCard
          title={
            activeTab === REPORT_TYPES.MONTHLY
              ? "장기적 개선 방향"
              : "개선 제안"
          }
          icon="trending-up"
          borderColor="#f0f8ff"
        >
          <Text style={styles.recommendationText}>
            {activeTab === REPORT_TYPES.MONTHLY
              ? currentReport?.longTermRecommendations ||
                "충분한 데이터가 쌓이면 제안을 드릴게요."
              : currentReport?.recommendations ||
                "충분한 데이터가 쌓이면 제안을 드릴게요."}
          </Text>
        </CollapsibleCard>
        {/* 일간 리포트용 새로고침 버튼 */}
        {activeTab === REPORT_TYPES.DAILY && (
          <TouchableOpacity
            style={styles.refreshButton}
            onPress={() => handleGenerateFeedback(false)}
          >
            <Text style={styles.refreshButtonText}>리포트 새로고침</Text>
          </TouchableOpacity>
        )}
        {/* 자동 업데이트 정보 */}
        <View style={styles.autoUpdateContainer}>
          <Text style={styles.autoUpdateInfo}>
            {activeTab === REPORT_TYPES.DAILY
              ? "일간 리포트는 5분마다 자동으로 갱신됩니다."
              : activeTab === REPORT_TYPES.WEEKLY
              ? "주간 리포트는 하루마다 자동으로 갱신됩니다."
              : "월간 리포트는 일주일마다 자동으로 갱신됩니다."}
          </Text>
          <Text style={styles.lastUpdateInfo}>
            마지막 갱신: {formatLastUpdateTime(lastUpdateTime)}
          </Text>
        </View>
        {/* 자동 생성 알림 텍스트 제거됨 - 무료 버전에서는 불필요 */}
        {/* 하단 여백 */}
        <View style={styles.bottomSpacer} />
      </View>
    );
  };

  return (
    <View style={{ flex: 1, backgroundColor: "#ffffff" }}>
      {/* StatusBar 컴포넌트 추가 */}
      <StatusBar style="dark" backgroundColor="#ffffff" translucent={false} />

      <SafeAreaView
        style={[
          styles.container,
          {
            // Android에서 강제 패딩 적용
            paddingTop:
              Platform.OS === "android" ? RNStatusBar.currentHeight || 35 : 0,
          },
        ]}
      >
        <HeaderBar
          navigation={navigation}
          badgeCount={earnedBadges?.length || 0}
          notificationCount={0}
        />
        <View style={styles.tabContainerWithUpgrade}>
          <View style={styles.tabsSection}>
            <TouchableOpacity
              style={[
                styles.tab,
                activeTab === REPORT_TYPES.DAILY && styles.activeTab,
              ]}
              onPress={() => handleTabChange(REPORT_TYPES.DAILY)}
            >
              <Text
                style={[
                  styles.tabText,
                  activeTab === REPORT_TYPES.DAILY && styles.activeTabText,
                ]}
              >
                일간
              </Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={[
                styles.tab,
                activeTab === REPORT_TYPES.WEEKLY && styles.activeTab,
              ]}
              onPress={() => handleTabChange(REPORT_TYPES.WEEKLY)}
            >
              <Text
                style={[
                  styles.tabText,
                  activeTab === REPORT_TYPES.WEEKLY && styles.activeTabText,
                ]}
              >
                주간
              </Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={[
                styles.tab,
                activeTab === REPORT_TYPES.MONTHLY && styles.activeTab,
              ]}
              onPress={() => handleTabChange(REPORT_TYPES.MONTHLY)}
            >
              <Text
                style={[
                  styles.tabText,
                  activeTab === REPORT_TYPES.MONTHLY && styles.activeTabText,
                ]}
              >
                월간
              </Text>
            </TouchableOpacity>
          </View>

          {/* AI 테스트 버튼 추가 */}
          <TouchableOpacity
            style={[
              styles.aiTestButton,
              isAITesting && styles.aiTestButtonDisabled,
            ]}
            onPress={handleAITest}
            disabled={isAITesting}
          >
            {isAITesting ? (
              <ActivityIndicator size="small" color="#fff" />
            ) : (
              <Ionicons name="flask" size={16} color="#fff" />
            )}
            <Text style={styles.aiTestButtonText}>
              {isAITesting ? "분석중..." : "AI 분석"}
            </Text>
          </TouchableOpacity>

          {/* 전체 무료이므로 업그레이드 버튼 제거 */}
        </View>
        <ScrollView
          style={styles.content}
          contentContainerStyle={styles.contentContainer}
        >
          {renderReport()}
        </ScrollView>
        {/* 목표 등록 모달 */}
        <Modal
          visible={showGoalModal}
          animationType="slide"
          transparent={true}
          onRequestClose={() => setShowGoalModal(false)}
        >
          <View
            style={{
              flex: 1,
              backgroundColor: "rgba(0,0,0,0.5)",
              justifyContent: "center",
              alignItems: "center",
            }}
          >
            <View
              style={{
                backgroundColor: "white",
                margin: 20,
                borderRadius: 12,
                padding: 20,
                width: "90%",
                maxHeight: "80%",
              }}
            >
              <Text
                style={{
                  fontSize: 18,
                  fontWeight: "bold",
                  marginBottom: 20,
                  textAlign: "center",
                }}
              >
                🎯 목표 등록
              </Text>

              {/* 목표 제목 */}
              <Text
                style={{
                  fontSize: 14,
                  fontWeight: "500",
                  marginBottom: 8,
                  color: "#333",
                }}
              >
                목표 제목 *
              </Text>
              <TextInput
                style={{
                  borderWidth: 1,
                  borderColor: "#ddd",
                  borderRadius: 8,
                  padding: 12,
                  marginBottom: 16,
                  fontSize: 16,
                }}
                value={goalForm.title}
                onChangeText={(text) =>
                  setGoalForm((prev) => ({ ...prev, title: text }))
                }
                placeholder="예: 토익 900점 달성"
                maxLength={50}
              />

              {/* 카테고리 선택 */}
              <Text
                style={{
                  fontSize: 14,
                  fontWeight: "500",
                  marginBottom: 8,
                  color: "#333",
                }}
              >
                카테고리
              </Text>
              <View
                style={{
                  flexDirection: "row",
                  flexWrap: "wrap",
                  marginBottom: 16,
                }}
              >
                {["시험", "자격증", "어학", "프로젝트", "취업준비", "기타"].map(
                  (category) => (
                    <TouchableOpacity
                      key={category}
                      style={{
                        backgroundColor:
                          goalForm.category === category
                            ? "#50cebb"
                            : "#f0f0f0",
                        paddingHorizontal: 12,
                        paddingVertical: 6,
                        borderRadius: 16,
                        marginRight: 8,
                        marginBottom: 8,
                      }}
                      onPress={() =>
                        setGoalForm((prev) => ({ ...prev, category }))
                      }
                    >
                      <Text
                        style={{
                          color:
                            goalForm.category === category ? "white" : "#333",
                          fontSize: 12,
                        }}
                      >
                        {category}
                      </Text>
                    </TouchableOpacity>
                  )
                )}
              </View>

              {/* 목표일 */}
              <Text
                style={{
                  fontSize: 14,
                  fontWeight: "500",
                  marginBottom: 8,
                  color: "#333",
                }}
              >
                목표일 *
              </Text>
              <View style={{ marginBottom: 16 }}>
                <TextInput
                  style={{
                    borderWidth: 1,
                    borderColor:
                      validateDate(goalForm.targetDate) || !goalForm.targetDate
                        ? "#ddd"
                        : "#FF4444",
                    borderRadius: 8,
                    padding: 12,
                    fontSize: 16,
                  }}
                  value={goalForm.targetDate}
                  onChangeText={(text) => {
                    // 숫자와 하이픈만 허용
                    const cleanText = text.replace(/[^0-9-]/g, "");
                    // 자동 하이픈 삽입
                    let formattedText = cleanText;
                    if (cleanText.length >= 4 && cleanText.charAt(4) !== "-") {
                      formattedText =
                        cleanText.slice(0, 4) + "-" + cleanText.slice(4);
                    }
                    if (
                      formattedText.length >= 7 &&
                      formattedText.charAt(7) !== "-"
                    ) {
                      formattedText =
                        formattedText.slice(0, 7) +
                        "-" +
                        formattedText.slice(7);
                    }
                    // 최대 길이 제한
                    if (formattedText.length <= 10) {
                      setGoalForm((prev) => ({
                        ...prev,
                        targetDate: formattedText,
                      }));
                    }
                  }}
                  placeholder="YYYY-MM-DD 형식으로 입력"
                  keyboardType="numeric"
                  maxLength={10}
                />
                <View
                  style={{
                    flexDirection: "row",
                    justifyContent: "space-between",
                    marginTop: 8,
                  }}
                >
                  <Text style={{ fontSize: 12, color: "#888" }}>
                    예:{" "}
                    {
                      new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)
                        .toISOString()
                        .split("T")[0]
                    }
                  </Text>
                  <TouchableOpacity
                    onPress={() => {
                      const oneWeekLater = new Date(
                        Date.now() + 7 * 24 * 60 * 60 * 1000
                      )
                        .toISOString()
                        .split("T")[0];
                      setGoalForm((prev) => ({
                        ...prev,
                        targetDate: oneWeekLater,
                      }));
                    }}
                  >
                    <Text style={{ fontSize: 12, color: "#50cebb" }}>
                      1주일 후
                    </Text>
                  </TouchableOpacity>
                  <TouchableOpacity
                    onPress={() => {
                      const oneMonthLater = new Date(
                        Date.now() + 30 * 24 * 60 * 60 * 1000
                      )
                        .toISOString()
                        .split("T")[0];
                      setGoalForm((prev) => ({
                        ...prev,
                        targetDate: oneMonthLater,
                      }));
                    }}
                  >
                    <Text style={{ fontSize: 12, color: "#50cebb" }}>
                      1달 후
                    </Text>
                  </TouchableOpacity>
                </View>
              </View>

              {/* 설명 */}
              <Text
                style={{
                  fontSize: 14,
                  fontWeight: "500",
                  marginBottom: 8,
                  color: "#333",
                }}
              >
                설명 (선택사항)
              </Text>
              <TextInput
                style={{
                  borderWidth: 1,
                  borderColor: "#ddd",
                  borderRadius: 8,
                  padding: 12,
                  marginBottom: 20,
                  fontSize: 16,
                  height: 80,
                  textAlignVertical: "top",
                }}
                value={goalForm.description}
                onChangeText={(text) =>
                  setGoalForm((prev) => ({ ...prev, description: text }))
                }
                placeholder="목표에 대한 상세 설명을 입력하세요"
                multiline
                maxLength={200}
              />

              {/* 버튼들 */}
              <View
                style={{
                  flexDirection: "row",
                  justifyContent: "space-between",
                }}
              >
                <TouchableOpacity
                  style={{
                    flex: 1,
                    backgroundColor: "#f0f0f0",
                    padding: 12,
                    borderRadius: 8,
                    marginRight: 8,
                    alignItems: "center",
                  }}
                  onPress={() => {
                    setShowGoalModal(false);
                    setGoalForm({
                      title: "",
                      category: "시험",
                      targetDate: "",
                      description: "",
                    });
                  }}
                >
                  <Text style={{ color: "#666", fontWeight: "500" }}>취소</Text>
                </TouchableOpacity>

                <TouchableOpacity
                  style={{
                    flex: 1,
                    backgroundColor: "#50cebb",
                    padding: 12,
                    borderRadius: 8,
                    marginLeft: 8,
                    alignItems: "center",
                  }}
                  onPress={handleGoalSubmit}
                >
                  <Text style={{ color: "white", fontWeight: "500" }}>
                    등록
                  </Text>
                </TouchableOpacity>
              </View>
            </View>
          </View>
        </Modal>
      </SafeAreaView>
    </View>
  );
};

export default AIFeedbackScreen;
